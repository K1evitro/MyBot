import os
import logging
from datetime import datetime, timedelta
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv

# === –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó .env ===
load_dotenv()

BOT_TOKEN: str = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_USERNAME: str = os.getenv("CHANNEL_USERNAME", "").strip()
PROFILE_USERNAME: str = os.getenv("PROFILE_USERNAME", "").strip()
GROUP_ID: int = int(os.getenv("GROUP_ID", "0"))
SPAM_COOLDOWN: int = int(os.getenv("SPAM_COOLDOWN", "60"))
LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO").upper()

# === –í–ê–õ–ò–î–ê–¶–ò–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===
if not BOT_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN –∑–∞–¥–∞–Ω –≤ .env")
if GROUP_ID == 0:
    raise ValueError("‚ùå GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 0")

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL),
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –•–†–ê–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ü–û–°–õ–ï–î–ù–ï–ì–û –û–¢–ó–´–í–ê ===
user_last_review: dict[int, datetime] = {}

# === –ö–û–ú–ê–ù–î–ê /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    keyboard = [
        [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton("üë§ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å", url=f"https://t.me/{PROFILE_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üôå\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# === –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–ù–û–ü–ö–£ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" ===
async def leave_review_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id

    last_time = user_last_review.get(user_id)
    if last_time and datetime.now() - last_time < timedelta(seconds=SPAM_COOLDOWN):
        remaining = SPAM_COOLDOWN - (datetime.now() - last_time).seconds
        await query.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–∑—ã–≤–æ–º.", show_alert=True)
        return

    await query.answer()
    await query.edit_message_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ ‚Äî —è —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É!\n\n"
        "üí° –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ç—ã, —Å–ø–∞–º –∏–ª–∏ —Å—Å—ã–ª–∫–∏ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
    )
    context.user_data['awaiting_review'] = True
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞")

# === –ü–†–û–í–ï–†–ö–ê –û–¢–ó–´–í–ê –ù–ê –°–ü–ê–ú ===
def is_valid_review(text: str) -> tuple[bool, str]:
    text = text.strip()
    if not text:
        return False, "–û—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(text) > 500:
        return False, "–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)"
    if "http://" in text or "https://" in text:
        return False, "–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
    if "@" in text and len(text.split("@")) > 2:
        return False, "–ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
    return True, ""

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –û–¢–ó–´–í–ê ===
async def handle_review_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = user.id
    message_text = update.message.text

    if not context.user_data.get('awaiting_review'):
        return

    is_valid, reason = is_valid_review(message_text)
    if not is_valid:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:\n{reason}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ—Ç–∑—ã–≤: {reason}")
        return

    user_last_review[user_id] = datetime.now()

    username = f"@{user.username}" if user.username else user.first_name
    forwarded_review = (
        f"üí¨ *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {username}* (`{user_id}`)\n\n"
        f"{message_text}\n\n"
        f"‚Äî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ‚Ä¢ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    try:
        await context.bot.send_message(
            chat_id=GROUP_ID,
            text=forwarded_review,
            parse_mode='Markdown'
        )
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤: '{message_text[:50]}...'")

    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")

    context.user_data['awaiting_review'] = False

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ‚Äî –ë–ï–ó asyncio.run()! ===
def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # ‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è PTB 22.4
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(leave_review_button, pattern="^leave_review$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(lambda u, c: logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {c.error}"))

    # ‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê ‚Äî –±–µ–∑ asyncio.run()!
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

# === –¢–û–ß–ö–ê –í–•–û–î–ê ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º main() ===
if __name__ == "__main__":
    main()