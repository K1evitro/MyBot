import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# === –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó .env ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
PROFILE_USERNAME = os.getenv("PROFILE_USERNAME")
GROUP_ID = int(os.getenv("GROUP_ID"))
SPAM_COOLDOWN = int(os.getenv("SPAM_COOLDOWN", 60))
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL.upper()),
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

user_last_review = {}

# === –ö–û–ú–ê–ù–î–ê /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{update.effective_user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–†–ê–ù–´ –õ–ò–®–ù–ò–ï –ü–†–û–ë–ï–õ–´ –í URL!
    keyboard = [
        [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")],
        [InlineKeyboardButton("üë§ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å", url=f"https://t.me/{PROFILE_USERNAME.strip('@')}")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üôå\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# === –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–ù–û–ü–ö–£ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" ===
async def leave_review_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    last_time = user_last_review.get(user_id)
    if last_time and datetime.now() - last_time < timedelta(seconds=SPAM_COOLDOWN):
        remaining = SPAM_COOLDOWN - (datetime.now() - last_time).seconds
        await query.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–∑—ã–≤–æ–º.", show_alert=True)
        return

    await query.answer()
    await query.edit_message_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ ‚Äî —è —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É!\n\n"
        "üí° –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ç—ã, —Å–ø–∞–º –∏–ª–∏ —Å—Å—ã–ª–∫–∏ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
    )
    context.user_data['awaiting_review'] = True
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞")

# === –ü–†–û–í–ï–†–ö–ê –û–¢–ó–´–í–ê –ù–ê –°–ü–ê–ú ===
def is_valid_review(text: str) -> tuple[bool, str]:
    text = text.strip()
    if not text:
        return False, "–û—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(text) > 500:
        return False, "–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)"
    if "http://" in text or "https://" in text:
        return False, "–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã"
    if "@" in text and len(text.split("@")) > 2:
        return False, "–ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
    return True, ""

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –û–¢–ó–´–í–ê ===
async def handle_review_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    message_text = update.message.text

    if not context.user_data.get('awaiting_review'):
        return

    is_valid, reason = is_valid_review(message_text)
    if not is_valid:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:\n{reason}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ—Ç–∑—ã–≤: {reason}")
        return

    user_last_review[user_id] = datetime.now()

    username = f"@{user.username}" if user.username else user.first_name
    forwarded_review = (
        f"üí¨ *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {username}* (`{user_id}`)\n\n"
        f"{message_text}\n\n"
        f"‚Äî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ‚Ä¢ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    try:
        await context.bot.send_message(
            chat_id=GROUP_ID,
            text=forwarded_review,
            parse_mode='Markdown'
        )
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤: '{message_text[:50]}...'")

    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")

    context.user_data['awaiting_review'] = False

# === –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ì–†–£–ü–ü–ï ===
async def check_group_access(application):
    try:
        await application.bot.get_chat(GROUP_ID)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {GROUP_ID}. –î–æ—Å—Ç—É–ø –µ—Å—Ç—å.")
    except Exception as e:
        logger.critical(f"‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ {GROUP_ID}. –û—à–∏–±–∫–∞: {e}")
        raise SystemExit("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ –æ—Ç–∑—ã–≤–æ–≤!")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
def main():
    if not BOT_TOKEN:
        logger.critical("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª!")
        exit(1)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(BOT_TOKEN).build()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
    app.add_error_handler(lambda u, c: logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {c.error}"))

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(leave_review_button, pattern="^leave_review$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review_message))

    app.run_polling()

if __name__ == "__main__":
    main()